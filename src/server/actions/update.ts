import { Action, SessionDataAccessor, ActionExecResults } from "rosa";
import { ActionParams } from "rosa-shared";
import * as Store from "../store";

// interface ActionParamsId extends ActionParams {
//   _id: string;
//   _type: string;
//   [key: string]: any;
// }

// TODO: call this Predictable instead??
// TODO: link together with subscription hashes?
// Predictable subscription hashes
// interface ActionIdentifyableObject extends Action {
//   changeset(
//     params: ActionParams,
//     currentValue?: { [key: string]: any }
//   ): ClientExecResultCreate | ClientExecResultDelete | ClientExecResultUpdate;
// }

// interface ClientStore {
//   delete(type: string, id: string): Promise<void>;
//   update(type: string, id: string, fields: {}): Promise<void>;
//   insert(type: string, id: string, fields: {}): Promise<void>;
// }
// enum ChangeSetType {
//   Create = "C",
//   Update = "U",
//   Delete = "D"
// }

// interface ClientExecResultUpdate {
//   changedFields?: { [key: string]: any };
//   deletedFields?: string[];
//   type: ChangeSetType.Update;
// }

// interface ClientExecResultCreate {
//   fields?: { [key: string]: any };
//   type: ChangeSetType.Create;
// }

// interface ClientExecResultDelete {
//   type: ChangeSetType.Delete;
// }

// TODO:TODO:TODO:TODO:TODO:TODO:TODO:TODO:
// changeset is being returned
// aware of type and ID
// known affected tags (generated by existing fields or via type model definition's fields- old and new values)
// exec() pexec()! BSON
const update: Action = {
  name: "update",

  authorize(params: ActionParams, session: SessionDataAccessor) {
    return session.get("admin");
  },

  /**
   * TODO: This must be a pure function!!!
   * It may throw an Error on invalid input.
   */
  // changeset(
  //   params: ActionParams,
  //   currentValue: { [key: string]: any } = {}
  // ): ClientExecResultUpdate {
  //   return {
  //     type: ChangeSetType.Update,
  //     changedFields: {
  //       done: !currentValue.done,
  //       updated: new Date()
  //     },
  //     deletedFields: ["waiting"]
  //   };
  // },

  /**
   * This may throw an Error.
   */
  exec(params: ActionParams, session: SessionDataAccessor) {
    // Store.update(params._id, params._type, params.fields);
    Store.update(params.id, params.fields);
    const result: ActionExecResults = {
      affectedTags: ["*", `Todo_${params.id}`],
      payload: true
    };
    return result;
  }
};

export default update;
